http://postgis.refractions.net/documentation/manual-1.3/ch03.html
./osmosis -v 100 --read-xml file=../../../planetosm/planet-100407.osm --write-pgsql host=localhost:5433 user=postgres database=lgd password=
java -jar LineStringUpdater.jar -dlgd_simple_0_6_postgis_1_3 -n1000 -upostgres -p[] 


select id, linestring into way_lines from ways where linestring IS NOT NULL;
CREATE FUNCTION add(integer, integer) RETURNS integer
    AS 'select $1 + $2;'
    LANGUAGE SQL
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;

Relation DatabaseState
-------------------------------------------------------------------------------
Used for keeping track of the state of certain processes - e.g. the date of the
most recently loaded dataset (as opposed to the date of load process)

CREATE TABLE DatabaseState (
	key TEXT NOT NULL PRIMARY KEY,
	value TEXT
);

INSERT INTO DatabaseState(key, value) VALUES('dataset', '2010-04-07 00:00:00');


Adding the geom to the tag tables
-------------------------------------------------------------------------------
ALTER TABLE way_tags ADD COLUMN linestring Geography;
UPDATE way_tags wt SET linestring = (SELECT w.linestring FROM ways w WHERE w.id = wt.way_id);
CREATE INDEX idx_way_tags_linestring ON way_tags USING GIST(linestring); 


Geography test
-------------------------------------------------------------------------------
/* Conversion of nodes table: */
SELECT id, version, user_id, tstamp, changeset_id, geom::geography INTO geognodes FROM nodes;
ALTER TABLE nodes RENAME TO nodes_orig;
ALTER INDEX idx_nodes_geom RENAME TO idx_nodes_orig_geom;
ALTER TABLE geognodes RENAME to nodes;
ALTER TABLE nodes ADD PRIMARY KEY(id);
CREATE INDEX idx_nodes_geom ON nodes USING GIST(geom);

/* Same for ways: */
SELECT id, version, user_id, tstamp, changeset_id, linestring::geography INTO geogways FROM ways;
ALTER TABLE ways RENAME TO ways_orig;
ALTER INDEX idx_ways_linestring RENAME TO idx_ways_orig_linestring;
ALTER TABLE geogways RENAME to ways;
ALTER TABLE ways ADD PRIMARY KEY(id);
CREATE INDEX idx_ways_linestring ON ways USING GIST(linestring);




create index idx_geogtest_geog on geogtest using gist(geog);
explain select id from geogtest where ST_DWithing(


Performance tests of real queries
-------------------------------------------------------------------------------
Slow counts are a known problem/feature of postgres, (mysql often uses cached counts)
here is some reading:
http://blog.charcoalphile.com/2007/12/12/postgresql-count-workaround/
http://www.varlena.com/GeneralBits/49.php



SELECT r.id FROM resources r WHERE r.label = 'amenity';
SELECT t.v, COUNT(*) AS c FROM lgd_tags t WHERE k=1590 GROUP BY t.v HAVING COUNT(t.v) > 10;

SELECT COUNT(*) FROM lgd_tags t WHERE k=1590 GROUP BY t.v;





Distance(), ST_Intersects(), ST_Contains() and ST_Within(),
WHERE the_geom && 'BOX3D(90900 190900, 100100 200100)'::box3d

create index idx_test on nodes using gist(geom) WHERE user_id > 1000 and user_id < 2000;
explain select * from nodes where Distance(geom, 'POINT(0.0 0.0)', 1000) and user_id > 4;


This query doesn't use indices:
Ok, the reference clearifies: http://postgis.refractions.net/documentation/manual-1.3/ch06.html
Its just the cartesian distance between two vectors - so nothing geo specific.
SELECT * FROM view_geoms g WHERE Distance(g.geom, GeomFromEWKT('SRID=4326;POINT(13.828.0 50.99)')) < 1000;


This query seems to work efficiently:
SELECT * FROM view_geoms g WHERE ST_DWithin(g.geom, GeomFromEWKT('SRID=4326;POINT(13.828 50.99)'), 10);


Additional Indices for the OSM schema:
-------------------------------------------------------------------------------
CREATE INDEX idx_node_tags_k_v ON node_tags(k, v);
CREATE INDEX idx_way_tags_k_v ON way_tags(k, v);
CREATE INDEX idx_relation_tags_k_v ON relation_tags(k, v);



Tokyo: http://linkedgeodata.org:7000/triplify/near/35.41,139.42/1000
Leipzig: http://linkedgeodata.org:7000/triplify/near/51.20,12.22/1000/amenity



Exception: http://localhost:7000/triplify/way/33241659 (not tried locally yet)
-------------------------------------------------------------------------------

Statistics
-------------------------------------------------------------------------------
Global count of how many times each key is used.
Rationale: Determine how many tags could be removed for optimization.
(e.g. how much reducation would be gain by removing all "source" tags?)
SELECT nt.k, COUNT(*) INTO stats_k_node_tags FROM node_tags nt GROUP BY nt.k;


Count of absolute URIS per k. Determine which links to other datasources exists.
SELECT nt.k, COUNT(*) INTO stats_k_count_uris FROM node_tags nt WHERE nt.v LIKE '%://%' GROUP BY nt.k;



	SUM(CASE WHEN v ~* 'yes'   THEN 1 ELSE 0 END) AS count_yes,
	SUM(CASE WHEN v ~* 'no'    THEN 1 ELSE 0 END) AS count_no,
	SUM(CASE WHEN v ~* 'true'  THEN 1 ELSE 0 END) AS count_true,
	SUM(CASE WHEN v ~* 'false' THEN 1 ELSE 0 END) AS count_false,
	SUM(CASE WHEN v ~* '1'     THEN 1 ELSE 0 END) AS count_one,
	SUM(CASE WHEN v ~* '0'     THEN 1 ELSE 0 END) AS count_zero


DROP FUNCTION LGD_TryParseBoolean(v TEXT);
CREATE FUNCTION LGD_TryParseBoolean(v TEXT) RETURNS BOOL AS
'
DECLARE
BEGIN
    RETURN
    	CASE
    		WHEN (v ~* ''true''  OR v ~* ''yes'' OR v = ''1'') THEN TRUE
    		WHEN (v ~* ''false'' OR v ~* ''no''  OR v = ''0'') THEN FALSE
    		ELSE NULL
    	END;
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;


DROP FUNCTION LGD_TryParseInt(str TEXT);
CREATE FUNCTION LGD_TryParseInt(str TEXT) RETURNS INT8 AS
'
DECLARE
BEGIN
    RETURN str::int8;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;


DROP FUNCTION LGD_TryParseFloat(str TEXT);
CREATE FUNCTION LGD_TryParseFloat(str TEXT) RETURNS FLOAT AS
'
DECLARE
BEGIN
    RETURN str::float;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;

SELECT
	k,
	SUM(1) AS count_total,
	SUM(CASE WHEN LGD_TryParseInt(v) IS NOT NULL THEN 1 ELSE 0 END) AS count_int,
	SUM(CASE WHEN LGD_TryParseFloat(v) IS NOT NULL THEN 1 ELSE 0 END) AS count_float
INTO
	lgd_stats_datatypes
FROM
	node_tags
GROUP BY
	k;


// Count bools
SELECT
	k,
	SUM(1) AS count_total,
	SUM(CASE WHEN v ~* 'yes'   THEN 1 ELSE 0 END) AS count_yes,
	SUM(CASE WHEN v ~* 'no'    THEN 1 ELSE 0 END) AS count_no,
	SUM(CASE WHEN v ~* 'true'  THEN 1 ELSE 0 END) AS count_true,
	SUM(CASE WHEN v ~* 'false' THEN 1 ELSE 0 END) AS count_false,
	SUM(CASE WHEN v ~* '1'     THEN 1 ELSE 0 END) AS count_one,
	SUM(CASE WHEN v ~* '0'     THEN 1 ELSE 0 END) AS count_zero
INTO
	lgd_stats_boolean
FROM
	node_tags
GROUP BY
	k;



SELECT
	k,
	SUM(1) AS count_total,
	SUM(CASE WHEN LGD_TryParseInt(v) IS NOT NULL THEN 1 ELSE 0 END) AS count_int,
	SUM(CASE WHEN LGD_TryParseFloat(v) IS NOT NULL THEN 1 ELSE 0 END) AS count_float
INTO
	lgd_stats_datatypes
FROM
	node_tags
GROUP BY
	k;


// Complete
SELECT
	k,
	SUM(1) AS count_total,
	SUM(CASE WHEN LGD_TryParseInt(v) IS NOT NULL THEN 1 ELSE 0 END) AS count_int,
	SUM(CASE WHEN LGD_TryParseFloat(v) IS NOT NULL THEN 1 ELSE 0 END) AS count_float,
	SUM(CASE WHEN LGD_TryParseBoolean(v) IS NOT NULL THEN 1 ELSE 0 END) as count_boolean
INTO
	lgd_stats_node_tags_datatypes
FROM
	node_tags
GROUP BY
	k;

SELECT
	k,
	SUM(1) AS count_total,
	SUM(CASE WHEN LGD_TryParseInt(v) IS NOT NULL THEN 1 ELSE 0 END) AS count_int,
	SUM(CASE WHEN LGD_TryParseFloat(v) IS NOT NULL THEN 1 ELSE 0 END) AS count_float,
	SUM(CASE WHEN LGD_TryParseBoolean(v) IS NOT NULL THEN 1 ELSE 0 END) as count_boolean
INTO
	lgd_stats_way_tags_datatypes
FROM
	way_tags
GROUP BY
	k;


SELECT
	k,
	SUM(count_total) AS count_total,
	SUM(count_int) AS count_int,
	SUM(count_float) AS count_float,
	SUM(count_boolean) AS count_boolean
INTO lgd_stats_datatypes
FROM
	((SELECT * FROM lgd_stats_node_tags_datatypes) UNION ALL
	(SELECT * FROM lgd_stats_way_tags_datatypes)) AS b
GROUP BY
	k;


/*
	SUM(CASE WHEN v ~* 'yes'   THEN 1 ELSE 0 END) AS count_yes,
	SUM(CASE WHEN v ~* 'no'    THEN 1 ELSE 0 END) AS count_no,
	SUM(CASE WHEN v ~* 'true'  THEN 1 ELSE 0 END) AS count_true,
	SUM(CASE WHEN v ~* 'false' THEN 1 ELSE 0 END) AS count_false,
	SUM(CASE WHEN v ~* '1'     THEN 1 ELSE 0 END) AS count_one,
	SUM(CASE WHEN v ~* '0'     THEN 1 ELSE 0 END) AS count_zero
*/

// Count bools
SELECT
	k,
	SUM(1) AS count_total,
	SUM(CASE WHEN v ~* 'yes'   THEN 1 ELSE 0 END) AS count_,
INTO
	lgd_stats_uris
FROM
	node_tags
GROUP BY
	k;


// Count URIs
SELECT
	k,
	SUM(1) AS count_total,
	SUM(CASE WHEN v SIMILAR TO ' *[^ ]+(.[^ ]+)+' THEN 1 ELSE 0 END) AS count_uri
INTO
	lgd_stats_uris
FROM
	node_tags
GROUP BY
	k;

	
Old pattern with http: ' *[^ ]+://[^ ]+ *'
select k, count_total, count_int / count_total::float as ratio_int, count_float / count_total::float as ratio_float from stats_datatypes order by ratio_int desc;


Resource table
-------------------------------------------------------------------------------
DROP TABLE IF EXISTS lgd_resources;
CREATE TABLE resources (
	id    BIGSERIAL,
	label TEXT NOT NULL UNIQUE
);



INSERT
	INTO resources(label)
SELECT 
	DISTINCT t.k
FROM
	way_tags t
WHERE
	NOT EXISTS(SELECT r.id FROM resources r WHERE r.label = t.k)


INSERT
	INTO resources(label)
SELECT 
	DISTINCT tmp.label
FROM
	((SELECT tk.k AS label FROM tags AS tk)
	UNION ALL (SELECT tv.v AS label FROM tags AS tv)) tmp
WHERE
	NOT EXISTS(SELECT r.id FROM resources r WHERE r.label = tmp.label)
;


INSERT
	INTO resources(label)
SELECT 
	DISTINCT tmp.label
FROM
	((SELECT DISTINCT tk.k AS label FROM relation_tags AS tk)
	UNION ALL (SELECT DISTINCT tv.v AS label FROM relation_tags AS tv)) tmp
WHERE
	NOT EXISTS(SELECT r.id FROM resources r WHERE r.label = tmp.label)
;



INSERT
	INTO resources(label)
		SELECT
			t.k
		FROM
			node_tags t
		WHERE
			NOT EXISTS(SELECT r.id FROM resources r WHERE r.label = t.k)
;


LGD-Tags
-------------------------------------------------------------------------------
DROP TABLE IF EXISTS lgd_tags;
CREATE TABLE lgd_tags (
	osm_entity_type OSMEntityType,
	id    BIGINT,
	k     BIGINT,
	v     BIGINT
);

CREATE INDEX idx_lgd_tags_osm_entity_type_id ON lgd_tags(osm_entity_type, id);
CREATE INDEX idx_lgd_tags_k_v ON lgd_tags(k, v);



INSERT
	INTO lgd_tags(osm_entity_type, id, k, v)
SELECT
	OSMEntityType('way'), t.way_id, rk.id, rv.id
FROM
	way_tags t
	INNER JOIN resources rk ON (rk.label = t.k)
	INNER JOIN resources rv ON (rv.label = t.v)
;



Tile statistics (key only)
-------------------------------------------------------------------------------
DROP TABLE IF EXISTS lgd_stats_tile_key_count;
CREATE TABLE lgd_stats_tile_key_count (
	tile BIGINT(10)   NOT NULL,
	k    BIGINT       NOT NULL,
	c    UNSIGNED INT NOT NULL,
	
	PRIMARY KEY(tile, key)
);


Tile statistics (key-value)
-------------------------------------------------------------------------------
DROP TABLE IF EXISTS lgd_stats_tile_key_value_freq;
CREATE TABLE lgd_stats_tile_key_value_freq (
	tile  BIGINT(10)   NOT NULL,
	k     BIGINT       NOT NULL,
	v     BIGINT       NOT NULL,
	c    UNSIGNED INT NOT NULL,
	
	PRIMARY KEY(tile, key)
);



View for ways and nodes
-------------------------------------------------------------------------------
CREATE VIEW view_geoms AS
	SELECT
		t.type, t.id, t.geom
	FROM
		((SELECT OSMEntityType('node') AS type, n.id AS id, n.geom FROM nodes n) UNION ALL
		 (SELECT OSMEntityType('way') AS type, w.id AS id, w.linestring AS geom FROM ways w)) AS t;


-------------------------------------------------------------------------------


trigger
Enabling/Disabling of triggers:
DISABLE TRIGGER [ trigger_name | ALL | USER ]
ENABLE TRIGGER [ trigger_name | ALL | USER ]


OSMEntityType
-------------------------------------------------------------------------------os
DROP TYPE IF EXISTS OSMEntityType;
CREATE TYPE OSMEntityType AS ENUM ('node', 'way', 'relation');
-------------------------------------------------------------------------------


OntologyEntityType
-------------------------------------------------------------------------------
DROP TYPE IF EXISTS OntologyEntityType;
CREATE TYPE OntologyEntityType AS ENUM ('Class', 'ObjectProperty', 'DatatypeProperty');
-------------------------------------------------------------------------------



elements table definition
-------------------------------------------------------------------------------



-------------------------------------------------------------------------------


elements table initialization

('created_by','ele','time','layer','source','tiger:tlid','tiger:county','tiger:upload_uuid','attribution','source_ref','KSJ2:coordinate','KSJ2:lat','KSJ2:long','KSJ2:curve_id','AND_nodes','converted_by');


properties table creation
-------------------------------------------------------------------------------
CREATE TABLE lgd_properties(
	k                    TEXT               NOT NULL,
	ontology_entity_type OntologyEntityType,
	usage_count          BIGINT             NOT NULL,
	distinct_value_count BIGINT             NOT NULL,
	PRIMARY KEY(k)
);

CREATE INDEX idx_lgd_properties_k ON lgd_properties(k);


property table initialization
-------------------------------------------------------------------------------
INSERT INTO
	lgd_properties(k, ontology_entity_type, usage_count, distinct_value_count)
SELECT
	t.k, NULL, COUNT(t.k), COUNT(DISTINCT t.v)
FROM 
	tags AS t
GROUP BY
	t.k


Classification query (for properties)
-------------------------------------------------------------------------------
UPDATE
	properties p
SET ontology_entity_type = 'Class'
WHERE p.k IN (
	'highway','barrier','cycleway','waterway','lock','railway','aeroway','aerialway','power','man_made','building','leisure','amenity','shop','tourism','historic','landuse','military','natural','route','boundary','sport'
);




-------------------------------------------------------------------------------

 id           | bigint                      | not null
 version      | integer                     | not null





view_tags [FINAL]
Note: Using strings instead of enums or integers doesn't work with the optimizer
-------------------------------------------------------------------------------
CREATE VIEW tags AS
	SELECT
		t.osm_entity_type, t.osm_entity_id, t.k, t.v
	FROM
		((SELECT OSMEntityType('node') AS osm_entity_type, node_id AS osm_entity_id, k, v FROM node_tags) UNION ALL
		 (SELECT OSMEntityType('way') AS osm_entity_type, way_id AS osm_entity_id, k, v FROM way_tags) UNION ALL
		 (SELECT OSMEntityType('relation') AS osm_entity_type, relation_id AS osm_entity_id, k, v FROM relation_tags)) AS t;
-------------------------------------------------------------------------------











CREATE VIEW view_tags AS SELECT
type, id, k, v
FROM
((SELECT 1 AS type, node_id AS id, k, v FROM node_tags) UNION ALL
(SELECT 2 AS type, way_id AS id, k, v FROM way_tags) UNION ALL
(SELECT 3 AS type, relation_id AS id, k, v FROM relation_tags)) AS tags;






CREATE VIEW view_tags AS SELECT
*
FROM
((SELECT 'node' AS type, node_id AS id, k, v FROM node_tags) UNION ALL
(SELECT 'way' AS type, way_id AS id, k, v FROM way_tags) UNION ALL
(SELECT 'relation' AS type, relation_id AS id, k, v FROM relation_tags)) AS tags;

CREATE VIEW view_tags AS SELECT
type, id, k, v
FROM
((SELECT 'node' AS type, id, k, v FROM (SELECT node_id AS id, k, v FROM node_tags) AS a) UNION ALL
(SELECT 'way'  AS type, id, k, v FROM (SELECT way_id  AS id, k, v FROM way_tags) AS b) UNION ALL
(SELECT 'relation' AS type, id, k, v FROM (SELECT relation_id AS id, k, v FROM relation_tags) AS c)) AS tags;




SELECT
	COUNT(*)
FROM
	((SELECT 'node' AS type, node_id AS id, k, v FROM node_tags) UNION ALL
	(SELECT 'way' AS type, way_id AS id, k, v FROM way_tags) UNION ALL
	(SELECT 'relation' AS type, relation_id AS id, k, v FROM relation_tags)) AS tags
;



		SELECT
			mm.way_id,
			CASE WHEN wn_min.node_id = wn_max.node_id THEN
				CASE WHEN mm.node_count >= 4 THEN 'polygon' ELSE 'error' END
			ELSE
				CASE WHEN mm.node_count >= 2 THEN 'line' ELSE 'error' END
			END
			AS way_type
		FROM (
			SELECT
				wn.way_id,
				MIN(wn.sequence_id) AS min_seq_id,
				MAX(wn.sequence_id) AS max_seq_id,
				COUNT(*) AS node_count
			FROM
				way_nodes wn
			WHERE
				wn.way_id = 92
			GROUP BY
				wn.way_id
		) mm
			INNER JOIN way_nodes wn_min ON ((wn_min.way_id, wn_min.sequence_id) = (mm.way_id, mm.min_seq_id))
			INNER JOIN way_nodes wn_max ON ((wn_max.way_id, wn_max.sequence_id) = (mm.way_id, mm.max_seq_id))
		;





Get the pure coordinates (maybe not the most elegant version though) - used for georrs
select REPLACE(REPLACE(REPLACE(ST_AsText(ST_Affine(linestring, 0, 1, 1, 0, 0, 0)), 'LINESTRING(', ''), ',', ' '), ')', '') from ways where id = 4279538;
ST_Affine(linestring, 0, 1, 1, 0, 0, 0)


GROUP_CONCAT QUERY:
	SELECT
	    w.id,
		array_to_string(array(
			SELECT
				X(n.geom) || ' ' || Y(n.geom)
			FROM
				way_nodes wn
				INNER JOIN nodes n ON (n.id = wn.node_id)
			WHERE
				wn.way_id = w.id
			ORDER BY
				wn.sequence_id
		), ' ') AS val
	FROM
		ways w
	WHERE
		w.id = 92


			SELECT
				wn.way_id, wn.sequence_id, n.id, X(n.geom) || ' ' || Y(n.geom)
			FROM
				way_nodes wn
				INNER JOIN nodes n ON (n.id = wn.node_id)
			WHERE
				wn.way_id = 92
			ORDER BY
				wn.sequence_id






Unfortunately the view is not browsable this way
(e.g. select * from waylines LIMIT 5 does not work)
DROP VIEW IF EXISTS waylines;
CREATE VIEW
	waylines
AS
SELECT
	c.way_id,
	MakeLine(c.geom) AS way_line
FROM
	(
		SELECT
			wn.way_id,
			n.geom
		FROM
			way_nodes wn
			INNER JOIN nodes n ON (n.id = wn.node_id)
		ORDER BY
			wn.way_id,
			wn.sequence_id
	) AS c
GROUP BY
	c.way_id
;


DROP FUNCTION LGD_test(val INT8);
CREATE FUNCTION LGD_test(val INT8) RETURNS INT8 AS
'
DECLARE
	result INT4 := 0;
BEGIN

    FOR i IN 0..val LOOP
        result := i;
    END LOOP;
    RETURN result;
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;


What i want now is a function that assigns a point to its tile.



DROP FUNCTION LGD_WidenBits(val INT4, n INT4);
CREATE FUNCTION LGD_WidenBits(val INT4, n INT4) RETURNS INT8 AS
'
DECLARE
    m INT4;
	tmp INT8;
	result INT8 := 0;
BEGIN
    m = n - 1;

    FOR i IN 0..m LOOP
        tmp := (val >> i) & 1;
        tmp := tmp << (i * 2);
        result := result | tmp;
    END LOOP;
    RETURN result;
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;


DROP FUNCTION LGD_ShrinkBits(INT8, INT4);
CREATE FUNCTION LGD_ShrinkBits(val INT8, n INT4) RETURNS INT4 AS
'
DECLARE
    m   INT4;
	tmp INT4;
	result INT4 := 0;
BEGIN
    m = n - 1;

    FOR i IN 0..m LOOP
        tmp := (val >> (i * 2)) & 1;
        tmp := tmp << i;
        result := result | tmp;
    END LOOP;
    RETURN result;
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;




DROP FUNCTION LGD_BitZip(lon INT4, lat INT4, n INT4);
CREATE FUNCTION LGD_BitZip(lon INT4, lat INT4, n INT4) RETURNS INT8 AS
'
BEGIN    
    RETURN (LGD_WidenBits(lon, n) << 1) | LGD_WidenBits(lat, n); 
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;


DROP FUNCTION LGD_ToTile(geom Geometry, zoom INT);
CREATE FUNCTION LGD_ToTile(geom Geometry, zoom INT) RETURNS INT8 AS
'
DECLARE
	f   INT4;
	lat INT4;
	lon INT4;
	tmpLat INT4;
	tmpLon INT4;
BEGIN
    f   := POW(2, zoom);
    lat := TRUNC((Y(geom) + 90.0) / 180.0 * f)::INT4;
	lon := TRUNC((X(geom) + 180.0) / 360.0 * f)::INT4;
    
    IF lat >= f THEN tmpLat := f - 1; ELSE tmpLat := lat; END IF;
    IF lon >= f THEN tmpLon := f - 1; ELSE tmpLon := lon; END IF;

    RETURN LGD_BitZip(tmpLon, tmpLat, zoom); 
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;



DROP FUNCTION LGD_ToTile(geog Geography, zoom INT);
CREATE FUNCTION LGD_ToTile(geog Geography, zoom INT) RETURNS INT8 AS
'

BEGIN
    RETURN LGD_ToTile(geog::geometry, zoom); 
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;



DROP FUNCTION LGD_ToTileLegacy(geom Geometry, zoom INT);
CREATE FUNCTION LGD_ToTileLegacy(geom Geometry, zoom INT) RETURNS INT8 AS
'
DECLARE
	f   INT4;
	lat INT4;
	lon INT4;
BEGIN
    f   := POW(2, zoom) - 1;
    lat := TRUNC((Y(geom) + 90.0) / 180.0 * f);
	lon := TRUNC((X(geom) + 180.0) / 360.0 * f);

    RETURN LGD_BitZip(lon, lat, zoom); 
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;




DROP FUNCTION LGD_ToBBox(tile INT8, zoom INT);
CREATE FUNCTION LGD_ToBBox(tile INT8, zoom INT) RETURNS Geometry AS
'
DECLARE
    f      FLOAT;
    lat    INT4;
    lon    INT4;
	latMin FLOAT;
	latMax FLOAT;
	lonMin FLOAT;
	lonMax FLOAT;
BEGIN
    f := POW(2, zoom);
    lat := LGD_ShrinkBits(tile, zoom);
    lon := LGD_ShrinkBits(tile >> 1, zoom);
    
    latMin := lat / f * 180.0 - 90.0;
	latMax := (lat + 1) / f * 180.0 - 90.0;

	lonMin := lon / f * 360.0 - 180.0;
	lonMax := (lon + 1) / f * 360.0 - 180.0;


    RETURN ST_SetSRID(ST_MakeBox2D(ST_MakePoint(lonMin, latMin), ST_MakePoint(lonMax, latMax)), 4326); 
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;






/* Black list table: Tags with those keys should be ignored for various tasks */
CREATE TABLE BlackListK (
	k TEXT PRIMARY KEY
)
	IF latMin < -180 THEN latMin = -180 END IF;
	IF lonMin < -180 THEN latMin = -180 END IF;
	IF latMin < -180 THEN latMin = -180 END IF;
	IF latMin < -180 THEN latMin = -180 END IF;
*/



BlackListKV

// Step 1: Find all tiles that are there
// Step 2: For each tile create the bounding box


// for a tile, how often the value k appears in tags
CREATE TABLE TilesK16 (
	tile_id INTEGER PRIMARY KEY,
	k TEXT NOT NULL,
	c INTEGER count
)

So the next step is: For each tile we need to aggregate the keys that are in there.
INSERT
	INTO TilesK16
SELECT
	



Some test
------
DROP FUNCTION LGD_ToT(Geometry);
CREATE FUNCTION LGD_ToT(geom Geometry) RETURNS Geometry AS
'
DECLARE
	lat INT4;
	lon INT4;
BEGIN
    lat := TRUNC((Y(geom) + 90.0) / 180.0 * 65536.0);
	lon := TRUNC((X(geom) + 180.0) / 360.0 * 65536.0); 
    
    RETURN MakePoint(lat, lon);
END;
'
    LANGUAGE 'plpgsql'
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;



TEST CASES FOR THESE POSTGRES FUNCTIONS
lgd=# SELECT ST_AsText(LGD_ToBBox(0, 0));
                      st_astext                      
-----------------------------------------------------
 POLYGON((-180 -90,-180 90,180 90,180 -90,-180 -90))
(1 Zeile)

lgd=# SELECT ST_AsText(LGD_ToBBox(1, 0));
                      st_astext                      
-----------------------------------------------------
 POLYGON((-180 -90,-180 90,180 90,180 -90,-180 -90))
(1 Zeile)

lgd=# SELECT ST_AsText(LGD_ToBBox(0, 1));
                   st_astext                   
-----------------------------------------------
 POLYGON((-180 -90,-180 0,0 0,0 -90,-180 -90))
(1 Zeile)
 
lgd=# SELECT ST_AsText(LGD_ToBBox(1, 1));
                 st_astext
-------------------------------------------
 POLYGON((-180 0,-180 90,0 90,0 0,-180 0))
(1 Zeile)
 
lgd=# SELECT ST_AsText(LGD_ToBBox(2, 1));
                st_astext
------------------------------------------
 POLYGON((0 -90,0 0,180 0,180 -90,0 -90))
(1 Zeile)
 
lgd=# SELECT ST_AsText(LGD_ToBBox(3, 1));
              st_astext
--------------------------------------
 POLYGON((0 0,0 90,180 90,180 0,0 0))
(1 Zeile)



Test data:
lat=50.1359444
lon=8.3013034
expected tile: 3493312635

select LGD_ToTileLegacy(ST_MakePoint(8.3013034, 50.1359444), 16);
select ST_AsText(LGD_ToBBox(3493312635, 16));

select ST_AsText(LGD_ToBBox(LGD_ToTile(ST_MakePoint(8.3013034, 50.1359444), 16), 16));

select ST_AsText(LGD_ToBBox(LGD_ToTile(ST_MakePoint(8.3013034, 50.1359444), 4), 4));




Tile Tables
-------------------------------------------------------------------------------
Tile k count
Tile k v cout


SELECT
	LGD_ToTile(nt.geom, 16) AS tile_id, k, COUNT(*) AS count
INTO
	node_tiles_k_16
FROM
	node_tags nt
GROUP BY
	tile_id, k;

CREATE INDEX idx_node_tiles_k_16_tile_id_k ON node_tiles_k_16 (tile_id, k);


SELECT
	ntk.tile_id >> (2 * 2) as tile_id, ntk.k, SUM(ntk.count) AS count
INTO
	node_tiles_k_$child
FROM
	node_tiles_k_$parent ntk
GROUP BY
	tile_id, k
CREATE INDEX idx_node_tiles_k_$child_tile_id_k ON node_tiles_k_$child (tile_id, k);
	
	



Property Mappings
-------------------------------------------------------------------------------

CREATE TABLE LGD_SimplePropertyMap(
	id       INTEGER PRIMARY KEY
	resource TEXT,
);

CREATE TABLE LGD_TagDependency(
	resource TEXT,
	k TEXT,
	v TEXT
);



// Vocab for addresses
http://www.freebase.com/view/m/05yvtm6/-/base/vocab/vocabulary/prop_spec





